colnames(people) <- c("first_name","height_inches","weight_lbs")
people[2,"height_inches"]
people[people$first_name == "Ada","height"]
people[people$first_name == "Ada","height_inches"]
people[people$first_name == "Ada","height_inches"]
people[people$first_name == "Ada","height_inches"]
employees <- paste("Employee",1:100)
print(employees)
salaries_2017 <- runif(100,40000,50000)
adjustments <- runif(100,-5000,10000)
salaries <- data.frame(employees, salaries_2017, adjustments)
salaries$salaries_2018 <- salaries_2017+adjustments
salaries$salaries_2018 <- salaries$salaries_2017+salaries$adjustments
salaries$got_raise <- salaries$adjustments >0
salaries[salaries$employees == "Employee 57","salaries_2018"]
nrow(salaries[salaries$got_raise == TRUE,])
salaries[ salaries$adjustments == max(salaries$adjustments),"adjustments"]
print(max(salaries$adjustments))
salaries[ salaries$adjustments == max(salaries$adjustments),"employees"]
# Exercise 2: working with data frames
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee",1:100)
print(employees)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100,40000,50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100,-5000,10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017+salaries$adjustments
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments >0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
print(salaries[salaries$employees == "Employee 57","salaries_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE,])
# What was the dollar value of the highest raise?
salaries[ salaries$adjustments == max(salaries$adjustments),"adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[ salaries$adjustments == max(salaries$adjustments),"employees"]
# What was the largest decrease in salaries between the two years?
# What was the name of the employee who recieved largest decrease in salary?
# What was the average salary change?
# For people who did not get a raise, how much money did they lose on average?
## Consider: do the above averages match what you expected them to be based on
## how you generated the salaries?
# Write a .csv file of your salary data to your working directory
salaries[ salaries$adjustments == min(salaries$adjustments),"adjustments"]
salaries[ salaries$adjustments == min(salaries$adjustments),"employees"]
salaries[ salaries$adjustments == mean(salaries$adjustments),"adjustments"]
mean(paycut$adjustments)
paycut <- salaries[salaries$got_raise == FALSE,]
mean(paycut$adjustments)
salaries[mean(salaries$adjustments)]
mean(salaries[salaries$got_raise == FALSE,"adjustments"])
mean(salaries$adjustments)
filter(ta_grades,better_at_math ==TRUE)
tas <- c("Phuong Vu","Yuwei Liang","Yubing Tian","Gavin Sreesangkom","Coco Li","George Zhang","Saurav Sawansukha","YuYu Madigan")
math_grades <- c(rnorm(8, mean=3.6, sd=0.4))
spanish_grades <- c(rnorm(8, mean=3.8, sd=0.25))
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
colnames_string <- paste(colnames(ta_grades),collapse = ",")
table_description <- paste("The grade data frame has",nrow(ta_grades),"and",ncol(ta_grades),"columns:", colnames_string)
print(table_description)
new_column_names <- c("ta","math_grade","spanish_grade")
colnames(ta_grades) <- new_column_names
better_at_math <- c(math_grades > spanish_grades)
ta_grades$better_at_math=better_at_math
ta_grades$better_at_math=better_at_math
print(ta_grades[7, ])
filter(ta_grades,better_at_math ==TRUE)
print(table_description)
filter(ta_grades,better_at_math ==TRUE)
filter(ta_grades,better_at_math ==TRUE)
filter(ta_grades,better_at_math ==TRUE)
filter(ta_grades,better_at_math ==TRUE)
?filter
Filter(ta_grades,better_at_math ==TRUE)
?Filter
nrow(c(better_at_math==TRUE))
nrow(c(better_at_math=="TRUE"))
c(better_at_math==TRUE)
print(better_at_math)
better_at_math <- c(math_grades > spanish_grades)
#################
#### PART 1 #####
#################
# creating variable tas containing the names of all 8 tas for info 201 winter.
tas <- c("Phuong Vu","Yuwei Liang","Yubing Tian","Gavin Sreesangkom","Coco Li","George Zhang","Saurav Sawansukha","YuYu Madigan")
#creating a vector math_grades with 8 random math grades with a mean of 3.6.
math_grades <- c(rnorm(8, mean=3.6, sd=0.4))
#creating vector spanish_grades with 8 numbers with a mean at 3.8.
spanish_grades <- c(rnorm(8, mean=3.8, sd=0.25))
#creating data frame ta_grades by combining the previous three vectors
ta_grades <- data.frame(tas, math_grades, spanish_grades, stringsAsFactors = FALSE)
#creating a variable table_description that will print out a string describing the table and a colnames_string variable.
colnames_string <- paste(colnames(ta_grades),collapse = ",")
table_description <- paste("The grade data frame has",nrow(ta_grades),"and",ncol(ta_grades),"columns:", colnames_string)
#printing table_description
print(table_description)
#creating new vector of column names
new_column_names <- c("ta","math_grade","spanish_grade")
#assigning new vector of column names to data frame colnames.
colnames(ta_grades) <- new_column_names
#adding column better_at_math to ta_grades telling us whether the ta got a higher grade in math than spanish
better_at_math <- c(math_grades > spanish_grades)
ta_grades$better_at_math=better_at_math
#printing out row with my ta's grades
print(ta_grades[7, ])
#creating variable num_better_at_math counting how many tas got a better math grade than spanish.
c(better_at_math==TRUEpr)
print(num_better_at_math)
#################s
#### PART 2 #####
#################
#loading built in data fram Titanic
data("Titanic")
#Viewing titanic
#View(Titanic)
#confirming if data frame
is.data.frame(Titanic)
#creating variable Titanic_df
Titanic_df <-as.data.frame(Titanic,stringsAsFactors = FALSE)
#Creating a variable children which filters out rows related to children on the Titanic
children <- filter()
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
print(better_at_math)
c(better_at_math==TRUE)
filter(ta_grades,better_at_math==TRUE)
nrows(filter(ta_grades,better_at_math==TRUE))
?ncol()
most_losses <- Titanic_df[Titanic_df$Survived == "No"]
most_losses <- Titanic_df[Titanic_df$Survived == "No",]
print(most_losses)
most_losses <- max(not_survived[not_survived$Freq])
not_survived <- Titanic_df[Titanic_df$Survived == "No",]
most_losses <- max(not_survived[not_survived$Freq])
most_losses <- max(not_survived[not_survived$Freq,])
most_losses <- max(not_survived[not_survived$Freq,])
most_losses <- max(not_survived[not_survived$Freq,])
most_losses <- not_survived[not_survived$Freq,]
print(not_survived)
most_losses <- not_survived[not_survived$Freq,"Freq"]
print(most_losses)
most_losses <- not_survived[not_survived,"Freq"]
not_survived <- Titanic_df[Titanic_df$Survived == "No","Freq"]
print(not_survived)
most_losses <- max(not_survived)
print(most_losses)
most_losses <- max(not_survived)
not_survived <- Titanic_df[Titanic_df$Survived == "No",]
print(not_survived)
not_survived$Freq
not_survived$Freq
max(not_survived$Freq)
not_survived$Freq==max(not_survived$Freq)
not_survived[not_survived$Freq==max(not_survived$Freq)]
not_survived[not_survived$Freq==max(not_survived$Freq),]
most_losses<- not_survived[not_survived$Freq==max(not_survived$Freq),]
print(most_losses)
calculate_survival_rate <- function(class) {
Titanic_df[Titanic_df$Class == "Class"]
Titanic_df[Titanic_df$Class == "3rd"]
class_subframe <- Titanic_df[Titanic_df$Class == "Class"]
print(Titanic_df)
install.packages(dyplr)
install.packages("dyplr")
install.packages("dplyr")
download.packages("dplyr")
installed.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.6")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.6")
install.packages("dplyr")
library("dplyr", lib.loc="~/R/win-library/3.6")
download.packages("tidyr")
install.packages("devtools")
devtools::install_github("hadley/fueleconomy")
library("devtools", lib.loc="~/R/win-library/3.6")
devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
View(fueleconomy)
View(vehicles)
select(vehicles,make)
column_make <- select(vehicles,make)
unique(column_make)
filter(column_make,year =="1997")
column_make <- vehicles$make
unique(column_make)
filter(column_make, year =="1997")
length(unique(column_make))
vehicles[vehicles$year == "1997"]
vehicles[vehicles$year == "1997",]
vehicles[vehicles$year == 1997,]
# Exercise 1: working with data frames (review)
# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
column_make <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(column_make))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997,]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy +vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
# What was the most efficient Honda model of 1995?
install.packages("devtools")
vehicles_1997$average <- (vehicles_1997$hwy +vehicles_1997$cty)/2
vehicles[vehicles$drive == "2-Whee Drive",]
vehicles_2wd <- vehicles[vehicles$drive == "2-Whee Drive",]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficient_2wd)
vehicles_2wd <- vehicles[vehicles$drive == "2-Wheel Drive",]
efficient_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficient_2wd)
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy),]
vehicles_2wd[vehicles_2wd$hwy == min(vehicles_2wd$hwy),"id"]
library("dplyr", lib.loc="~/R/win-library/3.6")
names <- c("Ada","Bob","Chris","Diya","Emma")
height <- c(64,74,69,69,71)
weight <- c(135,156,139,44,152)
people <- data.frame(name,height,weight,stringsAsFactors = FALSE)
name <- c("Ada","Bob","Chris","Diya","Emma")
height <- c(64,74,69,69,71)
weight <- c(135,156,139,44,152)
people <- data.frame( name, height,weight,stringsAsFactors = FALSE)
name <- c("Ada","Bob","Chris","Diya","Emma")
height <- c(64,74,69,69,71)
weight <- c(135,156,139,44,152)
people <- data.frame( name, height,weight,stringsAsFactors = FALSE)
select(my_data, name,height)
select(people, name,height)
filter(people,height>70,weight <155)
mutate(people, age = height/3)
new_column <- mutate(people, age = height/3)
select(vehicles,make)
vehicle_make <- select(vehicles,make)
distinct(vehicle_make)
filter(vehicles,year==1997)
vehicles_1997 <- filter(vehicles,year==1997)
arrange(vehicles_1997)
arrange(vehicles_1997,hwy)
install.packages("nycflights13")
library(nycflights13)
??flights
nrow(flights)
ncol(flights)
View(flights)
mutate(flights,delayed_in_air=arr_delay - dep_delay)
flights <- mutate(flights,delayed_in_air=arr_delay - dep_delay)
View(flights)
arrange(flights,delayed_in_air)
arrange(flights,-delayed_in_air)
View(flights)
arrange(flights,-delayed_in_air)
summarise(flights,avg = mean(delayed_in_air,na.rm =TRUE))
SeaTac <- filter(flights,dest == "SEA")
View(SeaTac)
SeaTac <- select(Seatac, origin, dest, delayed_in_air)
SeaTac <- select(SeaTac, origin, dest, delayed_in_air)
summarise(SeaTac,mean(delayed_in_air,na.rm = TRUE))
summarise(SeaTac,avg_delayed <- mean(delayed_in_air,na.rm = TRUE))
flights %>%
filter(dest=="SEA") %>%
summarize(avg_delayed = mean(delayed_in_air,na.rm = TRUE))
SeaTac <- filter(flights,dest == "SEA")
base_uri <- "https://api.github.com"
base_uri <- "https://api.github.com"
username <- "info201"
resource <- paste0("/users/",username,"/repos")
username <- "info201"
uri <- paste0(base_uri,resource)
install.packages(httr)
install.packages("httr")
library(httr)
GET(uri)
response <- GET(uri)
body <- content(response,"text")
print(body)
install.packages("jsonlite")
library(jsonlite)
data <- fromJSON(body)
print(data)
data[["+1"]]
View(data)
base_uri <- "https://api.github.com"
GET(paste0(base_uri,org_resource))
org_resource <- "/programming_for_data_science"
GET(paste0(base_uri,org_resource))
print(GET(paste0(base_uri,org_resource)))
get <- GET(paste0(base_uri,org_resource))
print(get)
response <- GET(paste0(base_uri,org_resource))
print(response)
contents <- content(response)
df_json <- fromJSON(contents)
contents <- content(response, "text")
df_json <- fromJSON(contents)
names(df_json)
names(df_json)
install.packages("ggplot2")
library(ggplot2)
ggplot(data = midwest) +
geom_point(mapping = aes(x= percollege,y= peradultpoverty))
install.packages("ggplot2")
library(ggplot2)
ggplot(data = midwest)
geom_point(mapping = aes(x= percollege,y= peradultpoverty))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
#install.packages("ggplot2")
library(ggplot2)
ggplot(data = midwest)
geom_point(mapping = aes(x= percollege,y= peradultpoverty))
#install.packages("ggplot2")
library(ggplot2)
ggplot(data = midwest)
geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#install.packages("ggplot2")
library(ggplot2)
ggplot(data = midwest)
geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#install.packages("ggplot2")
library(ggplot2)
midwest
ggplot(data = midwest)
geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#install.packages("ggplot2")
library(ggplot2)
midwest
ggplot(data = midwest)+geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#install.packages("ggplot2")
library(ggplot2)
midwest
ggplot(data = midwest)+geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#barchart
ggplot(data=midwest) +geom_bar(mapping = aes(x=percollege, y=percadultpoverty))
#hex;lot
ggplot(data=midwest) +geom_hex(mapping = aes(x=percollege, y=percadultpoverty))
install.packages("hexbin")
library(hexbin)
#install.packages("ggplot2")
library(ggplot2)
midwest
ggplot(data = midwest)+geom_point(mapping = aes(x= percollege,y= percadultpoverty))
#barchart
ggplot(data=midwest) +geom_bar(mapping = aes(x=percollege, y=percadultpoverty))
#hex;lot
ggplot(data=midwest) +geom_hex(mapping = aes(x=percollege, y=percadultpoverty))
# Exercise 1: ggplot2 basics
# Install and load the `ggplot2` package
# You will also want to load `dplyr`
#install.packages("ggplot1")
library(ggplot2)
library(dplyr)
# For this exercise you'll be working with the `diamonds` data set included in
# the ggplot2 library
# Use `?diamonds` to get more information about this data set (including the
# column descriptions. Also check the _column names_ and the _number of rows_
# in the data set
# This data set has A LOT of rows. To make things a bit more readable,
# use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
# Start by making a new `ggplot` with the `diamonds_sample` as the data (no
# geometry yet)
# What do you see? (What did you expect?)
# Draw a scatter plot (with point geometry) with for the `diamonds_sample` set,
# with the `carat` mapped to the x-position and `price` mapped to the y-position.
# Draw the same plot as above, but color each of the points based on their
# clarity.
# Draw the same plot as above, but for the entire `diamonds` data set. Note this
# may take a few seconds to generate.
# Draw another scatter plot for `diamonds_sample` of price (y) by carat (x),
# but with all of the dots colored "blue".
# Hint: you'll need to set the color channel, not map a value to it!
# Draw a scatter plot for `diamonds_sample` of `price` by `carat`, where each
# point has an aesthetic _shape_ based on the diamond's `cut`.
# Draw a scatter plot for `diamonds_sample` of *`cut`* by `carat`, where each
# point has an aesthetic _size_ based on the diamond's *`price`*
# Try coloring the above plot based on the diamond's price!
# Draw a line plot (with line geometry) for `diamonds_sample`. The x-position
# should be mapped to carat, y-position to price, and color to cut.
# That's kind of messy. Try using `smooth` geometry instead.
# Draw a plot with column geometry (a bar chart), mapping the diamond's `cut` to
# the x-axis and `price` to the y-axis. Note that by default, column geometry
# will us the "sum" of all of the y-values, so that the chart is actually of the
# TOTAL value of all of the diamonds of that cut!
# Add an aesthetic property that will _fill_ each bar geometry based on the
# `clarity` of the diamonds.
# What kind of chart do you get?
# Draw a plot of the `diamonds_sample` data (price by carat), with both points
# for each diamond AND smoothed lines for each cut (hint: in a separate color)
# Give the points an `alpha` (transparency) of 0.3 to make the plot look nicer
## Bonus
# Draw a column chart of average diamond prices by clarity, and include
# "error bars" marking the standard error of each measurement.
#
# You can calculate standard error as the _standard deviation_ divided by the
# square root of the number of measurements (prices)
# Start by creating a data frame `clarity_summary` that includes summarized data
# for each clarity group. Your summary data should include the mean price and the
# standard error of the price.
# Then draw the plot. The error bars should stretch from the mean-error to the
# mean+error.
?diamonds
nrow(diamonds)
ggplot(data= diamonds_sample)
diamonds_sample <- sample_n(diamonds,1000)
ggplot(data= diamonds_sample)
ggplot(data = diamonds_sample) + geom_point(aes(x=carat,y=price))
ggplot(data = diamonds_sample) + geom_point(aes(x=carat,y=price, color= clarity))
ggplot(data = diamonds) + geom_point(aes(x=carat,y=price, color= clarity))
ggplot(data = diamonds_sample) + geom_point(aes(x=carat,y=price, color= blue))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price),color=blue)
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price),color="blue")
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price,shape=cut))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=cut),size=price)
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=cut),size=price)
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=cut,size=price))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=cut,y=carat,size=price))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=cut,y=carat,size=price,color=price))
ggplot(data = diamonds_sample) + geom_line(mapping=aes(x=carat,y=price,color=cut))
print(ggplot(data = diamonds_sample) + geom_line(mapping=aes(x=carat,y=price,color=cut)))
ggplot(data = diamonds_sample) + geom_line(mapping=aes(x=carat,y=price,color=cut))+geom_smooth()
ggplot(data = diamonds_sample) + geom_smooth(mapping=aes(x=carat,y=price,color=cut))
ggplot(data = diamonds_sample) + geom_bar(mapping=aes(x=cut,y=price))
ggplot(data = diamonds_sample) + geom_bar(mapping=aes(x=cut,y=price))
ggplot(data = diamonds_sample) + geom_bar(mapping=aes(x=cut,y=price))
ggplot(data = diamonds_sample) + geom_col(mapping=aes(x=cut,y=price))
ggplot(data = diamonds_sample) + geom_col(mapping=aes(x=cut,y=price,fill=clarity))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price),alpha=0.3)+geom_smooth(mapping=aes(x=carat,y=price))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price),alpha=0.3)+geom_smooth(mapping=aes(x=carat,y=price, color=cut))
ggplot(data=midwest, mapping = aes(x=percollege, y=percadultpoverty,color=state))
ggplot(data=midwest)+geom_point(mapping = aes(x=percollege, y=percadultpoverty,color=state))
ggplot(data=midwest)+geom_point(mapping = aes(x=percollege, y=percadultpoverty,color=state))+ scale_x_reverse() + scale_y_continuous(limits = c(0,40))
ggplot(data=midwest)+geom_point(mapping = aes(x=percollege, y=percadultpoverty,color=state))+
scale_x_reverse() + scale_y_continuous(limits = c(0,40))+scale_color_hue(l=70,c=30)
ggplot(data = diamonds) + geom_col(mapping=aes(x=cut,y=price,fill=clarity))
ggplot(data = diamonds) + geom_col(mapping=aes(x=cut,y=price,fill=clarity),position="fill")
ggplot(data = diamonds) + geom_col(mapping=aes(x=cut,y=price,fill=clarity),position="dodge")
ggplot(data = diamonds) + geom_point(mapping=aes(x=cut,y=clarity))
ggplot(data = diamonds) + geom_point(mapping=aes(x=cut,y=clarity),position="jitter")
ggplot(data = diamonds) + geom_boxplot(mapping=aes(x=color,y=price))
ggplot(data = diamonds) + geom_boxplot(mapping=aes(x=color,y=price), position = "logarithmic")
ggplot(data = diamonds) + geom_boxplot(mapping=aes(x=color,y=price)) +scale_y_log10()
ggplot(data = diamonds) + geom_violin(mapping=aes(x=color,y=price))+scale_y_log10()
ggplot(data = diamonds) + geom_violin(mapping=aes(x=color,y=price))
ggplot(data = diamonds) + geom_violin(mapping=aes(x=color,y=price))+ scale_y_log10()
ggplot(data = diamonds) + geom_bin2d(mapping=aes(x=carat,y=price))
ggplot(data = diamonds) + geom_bin2d(mapping=aes(x=carat,y=price)) + scale_y_log10() + scale_x_log10()
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(pallete=1)
setwd("C:/Users/mwdel/book-exercises/chapter-16-exercises/exercise-2")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(pallete="set 3")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(pallete="Set3")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set3")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set4")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set2")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set1")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set6")
ggplot(data = diamonds) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set2")
diamonds_sample <- sample_n(diamonds,1000)
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Set2")
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Dark2")
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Dark2")
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity))+scale_color_brewer(palette="Purples")
evil_plot <- ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=cut,y=price, color=cut),width=1)
ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=carat,y=price, color=clarity)) + facet_wrap(~cut)
evil_plot <- ggplot(data = diamonds_sample) + geom_point(mapping=aes(x=cut,y=price, color=cut),set_width=1)
